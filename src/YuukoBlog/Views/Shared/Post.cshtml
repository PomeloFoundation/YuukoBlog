@model Post

<div class="blog-post">
    <div class="blog-post-content no-margin">
        @Html.Marked(Model.Content as string)
    </div>
    <div class="blog-comment-title"><i class="fa fa-comments-o"></i> Comments</div>
    <div class="blog-comments" id="blog-comments">
        <div class="blog-comment" v-for="comment in comments">
            <div class="blog-comment-left">
                <img v-if="!comment.isGuest" src="~/images/avatar.jpg" class="blog-comment-avatar" />
                <img v-else v-bind:src="comment.avatar" class="blog-comment-avatar" />
            </div>
            <div class="blog-comment-right">
                <div class="blog-comment-right-container">
                    <div class="blog-comment-header">
                        <span class="blog-comment-master" v-if="!comment.isGuest">Master</span>
                        {{ comment.isGuest ? comment.Name : '@ViewBag.Name' }}
                        <span class="blog-comment-time">@@{{ comment.time }}</span>
                    </div>
                    <div class="blog-comment-body" v-html="comment.content"></div>
                </div>
                <!-- Sub-comments -->
                <div class="blog-subcomment" v-for="sub in comment.comments">
                    <div class="blog-comment-header">
                        <img v-if="!comment.isGuest" src="~/images/avatar.jpg" class="blog-comment-avatar" />
                        <img v-else v-bind:src="sub.avatar" class="blog-comment-avatar" />
                        <span v-if="!sub.isGuest" class="blog-comment-master">Master</span>
                        {{ sub.isGuest ? sub.Name : '@ViewBag.Name' }}
                        <span class="blog-comment-time">@@{{ sub.time }}</span>
                    </div>
                    <div class="blog-subcomment-body" v-html="sub.content"></div>
                </div>
            </div>
            <div style="clear: both"></div>
        </div>
        <div class="blog-comment">
            <div class="blog-comment-left">
                <img src="~/images/default-avatar.jpg" class="blog-comment-avatar" />
            </div>
            <div class="blog-comment-right">
                <div class="blog-comment-right-container">
                    @if (!User.Identity.IsAuthenticated)
                    {
                    <div class="row blog-comment-input-row">
                        <div class="col-md-6">
                            <input class="form-control" placeholder="Name" />
                        </div>
                        <div class="col-md-6">
                            <input class="form-control" placeholder="Email" />
                        </div>
                    </div>
                    }
                    <div>
                        <textarea class="markdown-textbox"></textarea>
                    </div>
                </div>
            </div>
            <div style="clear: both"></div>
        </div>
    </div>
</div>
<script src="~/scripts/vue.js"></script>
<script src="~/scripts/simplemde.js"></script>
<script>
    var postId = '@Model.Id';
    var app = new Vue({
        el: '#blog-comments',
        data: {
            comments: []
        },
        methods: {
            loadComments: function () {
                var self = this;
                jQuery.getJSON('/comment/' + postId, {}, function (data) {
                    self.comments = data;
                });
            }
        },
        created: function () {
            this.loadComments();
        }
    })
    jQuery('.markdown-textbox').unbind().each(function () {
        var editor = jQuery(this);
        if (editor[0].smde == undefined) {
            var smde = new SimpleMDE({
                element: editor[0],
                spellChecker: false,
                status: false
            });
            editor[0].smde = smde;
            var begin_pos, end_pos;
            jQuery(this).parent().children().unbind().dragDropOrPaste(function () {
                begin_pos = smde.codemirror.getCursor();
                smde.codemirror.setSelection(begin_pos, begin_pos);
                smde.codemirror.replaceSelection(replaceText);
                begin_pos.line++;
                end_pos = { line: begin_pos.line, ch: begin_pos.ch + replaceInnerText.length };
            },
            function (result) {
                smde.codemirror.setSelection(begin_pos, end_pos);
                smde.codemirror.replaceSelection('![' + result.FileName + '](/file/download/' + result.Id + ')');
            });
        }
    });
</script>