@model Post

<div class="blog-post">
    <div class="blog-post-content no-margin">
        @Html.Marked(Model.Content as string)
    </div>
    <div class="blog-comment-title"><i class="fa fa-comments-o"></i> Comments</div>
    <div class="blog-comments" id="blog-comments">
        <div class="blog-comment" v-for="comment in comments">
            <div class="blog-comment-left">
                <img v-if="!comment.isGuest" src="~/images/avatar.jpg" class="blog-comment-avatar" />
                <img v-else v-bind:src="comment.avatar" class="blog-comment-avatar" />
            </div>
            <div class="blog-comment-right">
                <div class="blog-comment-right-container">
                    <div class="blog-comment-header">
                        <span class="blog-comment-master" v-if="!comment.isGuest">Master</span>
                        {{ comment.isGuest ? comment.name : '@ViewBag.Name' }}
                        <span class="blog-comment-time">@@{{ moment(new Date(comment.time)).format('YYYY-MM-DD hh:mm:ss') }}</span>
                        <a v-on:click="reply(comment.id)">Reply</a>
                        @if (User.Identity.IsAuthenticated)
                        {
                            <a v-on:click="deleteComment(comment.id)">Delete</a>
                        }
                    </div>
                    <div class="blog-comment-body" v-html="comment.content"></div>
                </div>
                <!-- Sub-comments -->
                <div class="blog-subcomment" v-for="sub in comment.comments">
                    <div class="blog-subcomment-header">
                        <img v-if="!sub.isGuest" src="~/images/avatar.jpg" class="blog-subcomment-avatar" />
                        <img v-else v-bind:src="sub.avatar" class="blog-subcomment-avatar" />
                        <span v-if="!sub.isGuest" class="blog-comment-master">Master</span>
                        {{ sub.isGuest ? sub.name : '@ViewBag.Name' }}
                        <span class="blog-comment-time">@@{{ moment(new Date(sub.time)).format('YYYY-MM-DD hh:mm:ss') }}</span>
                        <a v-on:click="reply(comment.id)">Reply</a>
                        @if (User.Identity.IsAuthenticated)
                        {
                            <a v-on:click="deleteComment(sub.id)">Delete</a>
                        }
                    </div>
                    <div class="blog-subcomment-body" v-html="sub.content"></div>
                </div>
                <div class="blog-subcomment-editor-outer" v-bind:id="'comment-editor-' + comment.id"></div>
            </div>
            <div style="clear: both"></div>
        </div>
        <div class="blog-comment" v-show="!commentId">
            <div class="blog-comment-left">
                <img src="~/images/default-avatar.jpg" class="blog-comment-avatar" />
            </div>
            <div class="blog-comment-right">
                <div class="blog-comment-right-container" id="root-reply">
                    <div id="comment-editor">
                        @if (!User.Identity.IsAuthenticated)
                        {
                            <div class="row blog-comment-input-row">
                                <div class="col-md-6">
                                    <input class="form-control" id="txt-name" placeholder="Name" />
                                </div>
                                <div class="col-md-6">
                                    <input class="form-control" id="txt-email" placeholder="Email" />
                                </div>
                            </div>
                        }
                        <div>
                            <textarea class="markdown-textbox" id="txt-comment"></textarea>
                        </div>
                        <div class="blog-comment-buttons">
                            <a class="blog-comment-button" v-on:click="postComment">Post</a>
                        </div>
                    </div>
                </div>
            </div>
            <div style="clear: both"></div>
        </div>
        <div v-show="commentId">
            <a v-on:click="reply(null)" class="blog-comment-add">+ Add Comment</a>
        </div>
    </div>
</div>
@if (User.Identity.IsAuthenticated)
{
    <form method="post" id="form-delete-post" action="/admin/delete">
    </form>
}
<script src="~/scripts/vue.js"></script>
<script src="~/scripts/simplemde.js"></script>
<script>
    var postId = '@Model.Id';
    var authenticated = @User.Identity.IsAuthenticated.ToString().ToLower();
    var app = new Vue({
        el: '#blog-comments',
        data: {
            comments: [],
            commentId: null
        },
        methods: {
            moment: function (time) {
                return moment(time);
            },
            reply: function (id) {
                this.commentId = id;
                if (id) {
                    jQuery('#comment-editor-' + id).append(jQuery('#comment-editor'));
                } else {
                    jQuery('#root-reply').append(jQuery('#comment-editor'));
                }
            },
            deleteComment: function (id) {
                if (confirm("Are you sure to remove this comment?")) {
                    var self = this;
                    jQuery.post('/admin/comment/delete', { id: id }, function () {
                        self.loadComments();
                    });
                }
            },
            deletePost: function (id) {
                jQuery('#form-delete-post').attr('action', '/admin/delete/' + id);
                jQuery('#form-delete-post').submit();
            },
            loadComments: function () {
                var self = this;
                jQuery.getJSON('/comment/' + postId, {}, function (data) {
                    self.comments = data;
                });
            },
            postComment: function () {
                var self = this;
                if (!authenticated) {
                    if (!jQuery('#txt-name').val()) {
                        alert('Please input your name');
                        return;
                    }
                    if (!jQuery('#txt-email').val()) {
                        alert('Please input your email');
                        return;
                    }
                }
                if (!jQuery('#txt-comment')[0].smde.value()) {
                    alert('Please input content');
                    return;
                }
                if (!authenticated) {
                    jQuery.post('/comment/' + postId, {
                        name: jQuery('#txt-name').val(),
                        email: jQuery('#txt-email').val(),
                        content: jQuery('#txt-comment')[0].smde.value(),
                        parentId: this.commentId
                    }, function (data) {
                        self.loadComments();
                        jQuery('#txt-name').val('');
                        jQuery('#txt-email').val('');
                        jQuery('#txt-comment')[0].smde.value('')
                    });
                } else {
                    jQuery.post('/comment/' + postId, {
                        content: jQuery('#txt-comment')[0].smde.value(),
                        parentId: this.commentId
                    }, function (data) {
                        self.loadComments();
                        jQuery('#txt-name').val('');
                        jQuery('#txt-email').val('');
                        jQuery('#txt-comment')[0].smde.value('')
                    });
                }
            }
        },
        created: function () {
            this.loadComments();
        }
    })
    jQuery('.markdown-textbox').unbind().each(function () {
        var editor = jQuery(this);
        if (editor[0].smde == undefined) {
            var smde = new SimpleMDE({
                element: editor[0],
                spellChecker: false,
                status: false
            });
            editor[0].smde = smde;
            var begin_pos, end_pos;
            jQuery(this).parent().children().unbind().dragDropOrPaste(function () {
                begin_pos = smde.codemirror.getCursor();
                smde.codemirror.setSelection(begin_pos, begin_pos);
                smde.codemirror.replaceSelection(replaceText);
                begin_pos.line++;
                end_pos = { line: begin_pos.line, ch: begin_pos.ch + replaceInnerText.length };
            },
            function (result) {
                smde.codemirror.setSelection(begin_pos, end_pos);
                smde.codemirror.replaceSelection('![' + result.FileName + '](/file/download/' + result.Id + ')');
            });
        }
    });
</script>